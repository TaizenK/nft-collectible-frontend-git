{"ast":null,"code":"var _jsxFileName = \"/Users/itounobuhiro/unchain/Polygon-Generative-NFT/nft-cllectible-frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport './App.css';\nimport contract from \"./contracts/NFTCollectible.json\";\nimport { ethers } from \"ethers\";\nimport { Fragment } from \"../node_modules/react/cjs/react.production.min\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst contractAddress = \"0x10f69DBbCd82Bb4F5EFFa5c0d2B36Ed33B6e8675\";\nconst abi = contract.abi;\nconst headerPicture = new URL('../headerimg.jpg', import.meta.url);\nconst TWITTER_HANDLE = \"itoukatyo\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nfunction App() {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [metamaskError, setMetamaskError] = useState(null);\n\n  const checkWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have MetaMask installed!\");\n      return;\n    } else {\n      console.log(\"Wallet exists! We're ready to go!\");\n    }\n\n    const accounts = await ethereum.request({\n      method: \"eth_accounts\"\n    });\n    const network = await ethereum.request({\n      metho: \"eth_chainId\"\n    });\n\n    if (accounts.length !== 0 && network.toString() === '0x13881') {\n      const account = accounts[0];\n      console.log(\"Found an authorized account: \", account);\n      setMetamaskError(false);\n      setCurrentAccount(account);\n    } else {\n      setMetamaskError(true);\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  const connectWalletHandler = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      alert(\"Please install MetaMask!\");\n    }\n\n    try {\n      const network = await ethereum.request({\n        method: 'eth_chainId'\n      });\n\n      if (network.toString() === '0x13881') {\n        const accounts = await ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        console.log(\"Found an account! Address: \", accounts[0]);\n        setMetamaskError(null);\n        setCurrentAccount(accounts[0]);\n      } else {\n        setMetamaskError(true);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const mintNftHandler = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const nftContract = new ethers.Contract(contractAddress, abi, signer);\n        console.log(\"Initialize payment\");\n        let nftTxn = await nftContract.mintNFTs(1, {\n          value: ethers.utils.parseEther(\"0.01\")\n        });\n        console.log(\"Mining... please wait\");\n        await nftTxn.wait();\n        console.log(`Mined, see transaction: ${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object does not exist\");\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const connectWalletButton = () => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectWalletHandler,\n      className: \"cta-button connect-wallet-button\",\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }, this);\n  };\n\n  const mintNftButton = () => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: mintNftHandler,\n      className: \"cta-button mint-nft-button\",\n      children: \"Mint NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }, this);\n  };\n\n  useEffect(() => {\n    checkWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [metamaskError && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"metamask-error\",\n      style: {\n        color: 'red',\n        width: '100px'\n      },\n      children: \"Metamask \\u304B\\u3089 Polygon Testnet \\u306B\\u63A5\\u7D9A\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\\uFF01\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: headerPicture\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-app\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Scrappy Squirrels Tutorial\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: currentAccount ? mintNftButton() : connectWalletButton()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"footer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"underLogo\",\n        children: [\"For studying with UNCHAIN\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-link\",\n          href: TWITTER_LINK,\n          children: `built on @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"Elaa0qVhwbvVF4aASV3L3FZaui8=\");\n\n_c = App;\n;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","contract","ethers","Fragment","contractAddress","abi","headerPicture","URL","import","meta","url","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","metamaskError","setMetamaskError","checkWalletIsConnected","ethereum","window","console","log","accounts","request","method","network","metho","length","toString","account","connectWalletHandler","alert","err","mintNftHandler","provider","providers","Web3Provider","signer","getSigner","nftContract","Contract","nftTxn","mintNFTs","value","utils","parseEther","wait","hash","connectWalletButton","mintNftButton","color","width"],"sources":["/Users/itounobuhiro/unchain/Polygon-Generative-NFT/nft-cllectible-frontend/src/App.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport './App.css';\nimport contract from \"./contracts/NFTCollectible.json\";\nimport { ethers } from \"ethers\";\nimport { Fragment } from \"../node_modules/react/cjs/react.production.min\";\n\nconst contractAddress = \"0x10f69DBbCd82Bb4F5EFFa5c0d2B36Ed33B6e8675\";\n\nconst abi = contract.abi;\n\nconst headerPicture = new URL('../headerimg.jpg', import.meta.url);\n\nconst TWITTER_HANDLE = \"itoukatyo\";\n\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nfunction App() {\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [metamaskError, setMetamaskError] = useState(null);\n\n  const checkWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have MetaMask installed!\");\n      return;\n    } else {\n      console.log(\"Wallet exists! We're ready to go!\");\n    }\n\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n    const network = await ethereum.request({ metho: \"eth_chainId\" });\n\n    if (accounts.length !== 0 && network.toString() === '0x13881') {\n      const account = accounts[0];\n      console.log(\"Found an authorized account: \", account);\n      setMetamaskError(false);\n      setCurrentAccount(account);\n    } else {\n      setMetamaskError(true);\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  const connectWalletHandler = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      alert(\"Please install MetaMask!\");\n    }\n\n    try {\n      const network = await ethereum.request({ method: 'eth_chainId' });\n\n      if (network.toString() === '0x13881') {\n        const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n        console.log(\"Found an account! Address: \", accounts[0]);\n        setMetamaskError(null);\n        setCurrentAccount(accounts[0]);\n      }\n      else {\n        setMetamaskError(true);\n      }\n    }\n    catch (err) {\n      console.log(err);\n    }\n\n  };\n\n  const mintNftHandler = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const nftContract = new ethers.Contract(contractAddress, abi, signer);\n\n        console.log(\"Initialize payment\");\n        let nftTxn = await nftContract.mintNFTs(1, {\n          value: ethers.utils.parseEther(\"0.01\"),\n        });\n\n        console.log(\"Mining... please wait\");\n        await nftTxn.wait();\n\n        console.log(`Mined, see transaction: ${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object does not exist\");\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n\nconst connectWalletButton = () => {\n  return (\n    <button onClick={connectWalletHandler} className=\"cta-button connect-wallet-button\">\n      Connect Wallet\n    </button>\n  );\n};\n\n\nconst mintNftButton = () => {\n  return (\n    <button onClick={mintNftHandler} className=\"cta-button mint-nft-button\">\n      Mint NFT\n    </button>\n  );\n};\n\nuseEffect(() => {\n  checkWalletIsConnected();\n}, []);\n\nreturn (\n  <>\n    {metamaskError && <div className='metamask-error' style={{color: 'red',width: '100px'}}>Metamask から Polygon Testnet に接続してください！</div>}\n    <div className=\"header\">\n      <img src={headerPicture} />\n    </div>\n    <div className=\"main-app\">\n      <h1>Scrappy Squirrels Tutorial</h1>\n      <div>{currentAccount ? mintNftButton() : connectWalletButton()}</div>\n    </div>\n    <div className='footer'>\n      <div className='underLogo'>\n        For studying with UNCHAIN\n        <br />\n        <a className=\"footer-link\" href={TWITTER_LINK}>{`built on @${TWITTER_HANDLE}`}</a>\n      </div>\n    </div>\n  </>\n);\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}